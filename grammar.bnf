 
LPAR : "("

RPAR : ")"

LBRACE : "{"

RBRACE : "}"

TYPE_CONTEXT_START : "-|"

TYPE_IS_EXPRESSION_OF : "::"

ARROW : "->"

EOE : ";"

PIPE_LEFT.2 : "<|"
PIPE_RIGHT.2 : "|>"

PIPE_LEFT_LIST : "<[]|"

PIPE_RIGHT_LIST : "|[]>"

PIPE_ARG_RIGHT : /\$(0+|[1-9][0-9]*)>\$/

PIPE_ARG_LEFT : /\$(0+|[1-9][0-9]*)<\$/

PIPE_ARG_UNDIRECTED : /\$(0+|[1-9][0-9]*$)/

PIPE_OUT_LEFT : /\$_(0+|[1-9][0-9]*)<\$/

PIPE_OUT_RIGHT : /\$_(0+|[1-9][0-9]*)>\$/

PIPE_OUT_UNDIRECTED : /\$_(0+|[1-9][0-9]*)\$/

pipe_arg : PIPE_ARG_UNDIRECTED | PIPE_ARG_RIGHT | PIPE_ARG_LEFT  | PIPE_OUT_RIGHT |PIPE_OUT_RIGHT |PIPE_OUT_UNDIRECTED

special_symbols.2 : /\b_\b/ | "@" | pipe_arg

identifier : /(([^(){}\[\]\|\.\\\n\s@$=:;<>+-\/*]([^(){}\[\]\|\\\n\s@$=:;<>+-\/*]|\.)*)|_([^(){}\[\]\|\\\n\s@$=:;<>+-\/*]|\.)+)/

identifier_parentheses : LPAR identifier RPAR
    | LPAR identifier_parentheses RPAR

string : ESCAPED_STRING

num : NUMBER

infix_operator : "+"|"-"|"*"|"/"



type_assumption_subrutine : "subrutine" identifier TYPE_IS_EXPRESSION_OF type TYPE_CONTEXT_START type_context
    | "subrutine" identifier TYPE_IS_EXPRESSION_OF "None"
    | "subrutine" identifier TYPE_IS_EXPRESSION_OF "None" TYPE_CONTEXT_START type_context

type_assumption_function : identifier TYPE_IS_EXPRESSION_OF type TYPE_CONTEXT_START type_context

type_atom : identifier
    | "(" type ")"

type : type_atom (ARROW type_atom )*

type_context : (LPAR identifier TYPE_IS_EXPRESSION_OF identifier RPAR)* identifier TYPE_IS_EXPRESSION_OF identifier 

    




uneval_function : "@" (identifier | infix_operator)


?atom : string
    | num
    | identifier
    | uneval_function 
    | pipe_arg
    | LPAR pipe RPAR

?function_application : atom+

?prod : function_application ("*" function_application)*

?div : prod ("/" prod)?

?add : div (("+"|"-") div)*

?pipe : add ((PIPE_RIGHT | PIPE_LEFT) add)*

let : "let" pattern "be" LPAR expression  RPAR "in" expression_block
    | "let" pattern "be" LBRACE expression RBRACE "in" expression_block

case : "case" LPAR ("|" expression? "=" expression)+ RPAR
    | "case" LBRACE ("|" expression? "=" expression)+ RBRACE


expression : pipe  EOE
    | expression_block 
    | case
    | let 



expression_block : LPAR (expression | statement |identifier "=" expression )* expression RPAR
    | LBRACE (expression | statement | identifier "=" expression )* expression RBRACE

statement_block : LPAR (expression | statement | identifier "=" expression )* RPAR
    | LBRACE (expression | statement | identifier "=" expression)* RBRACE


pattern_atom : identifier
    | "_"
    | LBRACE pattern RBRACE
    | LPAR pattern RPAR 

pattern : pattern_atom +

import_as : identifier "as" identifier

import : "import" identifier ("as" identifier)?
    | "from" identifier "import" ( (identifier | import_as) ",")* (identifier | import_as)


function_pattern : identifier
    | "_"
    | num
    | LBRACE pattern RBRACE
    | LPAR pattern RPAR 


function_declaration : type_assumption_function LPAR (identifier function_pattern "=" expression)+ RPAR
    | type_assumption_function LBRACE (identifier function_pattern "=" expression)+ RBRACE

subrutine_declaration : type_assumption_subrutine LPAR ((identifier function_pattern "=" expression )* | identifier "=" expression )RPAR
    | type_assumption_subrutine LBRACE ((identifier function_pattern "=" expression )* | identifier "=" expression ) RBRACE


statement : function_declaration
    | subrutine_declaration
    | import 

program : statement*



//a->b->c
//(a->b)->c
//a->(b->c)
//a->(b->c)->d
//a->(b)->(c->d->e->(f->g))->((h))->i


%declare subrutine_application 
%import common.ESCAPED_STRING
%import common.NUMBER
%import common.WS
%import common.CNAME
%ignore WS
