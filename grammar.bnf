 
_LPAR : "("

_RPAR : ")"

_LBRACE : "{"

_RBRACE : "}"

_TYPE_CONTEXT_START : "-|"

_TYPE_IS_EXPRESSION_OF : "::"

_EQU : "="

_ARROW : "->"

PLUS : "+"

MINUS : "-"

MUL : "*"

DIV : "/"

EOE : ";"

PIPE_LEFT.2 : "<|"
PIPE_RIGHT.2 : "|>"

PIPE_LEFT_LIST : "<[]|"

PIPE_RIGHT_LIST : "|[]>"

PIPE_ARG_RIGHT : /\$(0+|[1-9][0-9]*)>\$/

PIPE_ARG_LEFT : /\$(0+|[1-9][0-9]*)<\$/

PIPE_ARG_UNDIRECTED : /\$(0+|[1-9][0-9]*$)/

PIPE_OUT_LEFT : /\$_(0+|[1-9][0-9]*)<\$/

PIPE_OUT_RIGHT : /\$_(0+|[1-9][0-9]*)>\$/

PIPE_OUT_UNDIRECTED : /\$_(0+|[1-9][0-9]*)\$/

pipe_arg : PIPE_ARG_UNDIRECTED | PIPE_ARG_RIGHT | PIPE_ARG_LEFT  | PIPE_OUT_RIGHT |PIPE_OUT_RIGHT |PIPE_OUT_UNDIRECTED


identifier : /(([^(){}\[\]\|\.\\\n\s@$=:;<>+\-'"\/*]([^(){}\[\]\|\\\n\s@$=:;<>+\-'"\/*]|\.)*)|_([^(){}\[\]\|\\\n\s@$=:;<>+\-'"\/*]|\.)+)/


identifier_parentheses : _LPAR identifier _RPAR
    | _LPAR identifier_parentheses _RPAR

string : ESCAPED_STRING

num : NUMBER

infix_operator : PLUS|MINUS|MUL|DIV



type_assumption_subrutine : "subrutine" identifier _TYPE_IS_EXPRESSION_OF type (_TYPE_CONTEXT_START type_context)?

type_assumption_function : identifier _TYPE_IS_EXPRESSION_OF type _TYPE_CONTEXT_START type_context

type_atom : identifier
    | "(" type ")"

type : type_atom (_ARROW type_atom )*

type_context : (_LPAR identifier _TYPE_IS_EXPRESSION_OF identifier _RPAR)* identifier _TYPE_IS_EXPRESSION_OF identifier 

    




un_evaluated_function : "@" (identifier | infix_operator)


?atom : string
    | num
    | identifier
    | un_evaluated_function
    | pipe_arg
    | _LPAR pipe _RPAR

?function_application : atom+

?prod : function_application ("*" function_application)*

?div : prod ("/" prod)?

?add : div (("+"|"-") div)*

?pipe : add ((PIPE_RIGHT | PIPE_LEFT) add)*

let : "let" pattern "be" _LPAR expression  _RPAR "in" expression_block
    | "let" pattern "be" _LBRACE expression _RBRACE "in" expression_block

case : "case" _LPAR ("|" expression? _EQU expression)+ _RPAR
    | "case" _LBRACE ("|" expression? _EQU expression)+ _RBRACE


expression : pipe  EOE
    | expression_block 
    | case
    | let 



expression_block : _LPAR (expression | statement |identifier _EQU expression )* expression _RPAR
    | _LBRACE (expression | statement | identifier _EQU expression )* expression _RBRACE

statement_block : _LPAR (expression | statement | identifier _EQU expression )* _RPAR
    | _LBRACE (expression | statement | identifier _EQU expression)* _RBRACE


pattern_atom : identifier
    | "_"
    | _LBRACE pattern _RBRACE
    | _LPAR pattern _RPAR 

pattern : pattern_atom +

import_as : identifier "as" identifier

import_from : "from" identifier "import" ( (identifier | import_as) ",")* (identifier | import_as)

import_ : "import" identifier ("as" identifier)?
    | import_from


function_pattern : identifier
    | "_"
    | num
    | _LBRACE pattern _RBRACE
    | _LPAR pattern _RPAR 


function_declaration : type_assumption_function _LPAR (identifier function_pattern _EQU expression)+ _RPAR
    | type_assumption_function _LBRACE (identifier function_pattern _EQU expression)+ _RBRACE

subrutine_declaration : type_assumption_subrutine _LPAR ((identifier function_pattern _EQU expression )* | identifier _EQU expression )_RPAR
    | type_assumption_subrutine _LBRACE ((identifier function_pattern _EQU expression )* | identifier _EQU expression ) _RBRACE


statement : function_declaration
    | subrutine_declaration

program : (statement |import_)*



//a->b->c
//(a->b)->c
//a->(b->c)
//a->(b->c)->d
//a->(b)->(c->d->e->(f->g))->((h))->i


%declare subrutine_application 
%import common.ESCAPED_STRING
%import common.NUMBER
%import common.WS
%import common.CNAME
%ignore WS
